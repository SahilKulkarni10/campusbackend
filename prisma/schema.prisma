generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Post {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  price      Int
  images     String[]
  address    String
  city       String
  college    String
  venue      String
  type       Type
  category   String
  date       DateTime?
  organizer  String?
  attendees  Int?        @default(0)
  createdAt  DateTime    @default(now())
  user       User        @relation("AuthorRelation", fields: [userId], references: [id])
  userId     String      @db.ObjectId
  postDetail PostDetail?
  savedPosts SavedPost[]
}

enum Type {
  buy
  rent
}

enum Property {
  apartment
  house
  condo
  land
}

model PostDetail {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  desc       String
  utilities  String?
  pet        String?
  income     String?
  size       Int?
  school     Int?
  bus        Int?
  restaurant Int?
  post       Post    @relation(fields: [postId], references: [id])
  postId     String  @unique @db.ObjectId
}

model SavedPost {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
  userId    String   @db.ObjectId
  postId    String   @db.ObjectId
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

model User {
  id                   String                @id @default(auto()) @map("_id") @db.ObjectId
  username             String                @unique
  email                String                @unique
  password             String
  avatar               String?
  coverPhoto           String?
  about                String?
  createdAt            DateTime              @default(now())
  posts                Post[]                @relation("AuthorRelation")
  savedPostsRel        SavedPost[]
  userChats            UserChat[]
  forums               Forum[]               @relation("ForumCreator")
  forumPosts           ForumPost[]           @relation("ForumPostAuthor")
  comments             Comment[]             @relation("CommentAuthor")
  generalChatMessages  GeneralChatMessage[]
}

model Chat {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  userChats   UserChat[] // Relation to the junction table
  userIDs     String[]   @db.ObjectId
  createdAt   DateTime   @default(now())
  seenBy      String[]   @db.ObjectId
  messages    Message[]
  lastMessage String?
}

model UserChat {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  chatId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  chat      Chat     @relation(fields: [chatId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, chatId]) // Prevent duplicate entries
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  userId    String
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String   @db.ObjectId
  createdAt DateTime @default(now())
}

// New models for forums

model Forum {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  createdBy   String     @db.ObjectId
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  posts       ForumPost[] @relation("ForumPosts")
  creator     User        @relation("ForumCreator", fields: [createdBy], references: [id])
}

model ForumPost {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  content     String
  forumId     String     @db.ObjectId
  authorId    String     @db.ObjectId
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  forum       Forum      @relation("ForumPosts", fields: [forumId], references: [id])
  author      User       @relation("ForumPostAuthor", fields: [authorId], references: [id])
  comments    Comment[]  @relation("PostComments")
}

model Comment {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  text        String
  postId      String     @db.ObjectId
  authorId    String     @db.ObjectId
  createdAt   DateTime   @default(now())
  post        ForumPost  @relation("PostComments", fields: [postId], references: [id])
  author      User       @relation("CommentAuthor", fields: [authorId], references: [id])
}

// General chat models
model GeneralChat {
  id        String               @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime             @default(now())
  messages  GeneralChatMessage[]
}

model GeneralChatMessage {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  text          String
  userId        String      @db.ObjectId
  user          User        @relation(fields: [userId], references: [id])
  generalChat   GeneralChat @relation(fields: [generalChatId], references: [id])
  generalChatId String      @db.ObjectId
  createdAt     DateTime    @default(now())
}
